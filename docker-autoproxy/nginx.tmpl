{{/*
  Licensed under the terms of the MIT license.
  Based on https://github.com/jwilder/nginx-proxy/blob/44a5322/nginx.tmpl
  Copyright (c) 2014 Jason Wilder
  Modifications Copyright (c) 2015 Stefan Siegel
*/}}

user nginx;
worker_processes 4;

error_log syslog:server=unix:/dev/log info;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    # multi_accept on;
}

http {


include       /etc/nginx/mime.types;
default_type  application/octet-stream;

log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for"';

log_format  vhost '$host $remote_addr - $remote_user [$time_local] '
                  '"$request" $status $body_bytes_sent '
                  '"$http_referer" "$http_user_agent"';

log_format syslog '$remote_addr $host:$server_port '
                  '"$request" $status $body_bytes_sent '
                  '"$http_referer" "$http_user_agent"';

# http://nginx.org/en/docs/syslog.html
# http://nginx.com/resources/admin-guide/logging-and-monitoring/
access_log syslog:server=unix:/dev/log syslog;
error_log syslog:server=unix:/dev/log info;

sendfile on;
tcp_nopush on;
tcp_nodelay on;

keepalive_timeout  65;
types_hash_max_size 2048;
# server_tokens off;

server_names_hash_bucket_size 128;
# server_name_in_redirect off;

gzip on;
gzip_disable "msie6";

# gzip_vary on;
# gzip_proxied any;
# gzip_comp_level 6;
# gzip_buffers 16 8k;
# gzip_http_version 1.1;
gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;

ssl_prefer_server_ciphers on;
ssl_session_timeout 5m;
ssl_session_cache shared:SSL:50m;

ssl_stapling on;
ssl_stapling_verify on;
resolver 8.8.8.8 8.8.4.4 valid=300s;
resolver_timeout 5s;

ssl_dhparam /etc/ssl/private/dhparam-2048.pem;
ssl_trusted_certificate /etc/ssl/private/default.pem;
ssl_certificate /etc/ssl/private/default.pem;
ssl_certificate_key /etc/ssl/private/default.pem;


# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  ''      '';
}


# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_connect_timeout 30s;
proxy_read_timeout 1d;
proxy_send_timeout 1d;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;

server {
	listen 80 default_server;
	listen 443 default_server ssl;

	location / {
		return 503;
	}

	error_page 500 //500.html;
	error_page 502 //502.html;
	error_page 503 //503.html;
	error_page 504 //504.html;
	error_page 403 //403.html;
	error_page 404 //404.html;
	location = //500.html { internal; root /usr/share/nginx/html; try_files /500.html =500; }
	location = //502.html { internal; root /usr/share/nginx/html; try_files /502.html =502; }
	location = //503.html { internal; root /usr/share/nginx/html; try_files /503.html =503; }
	location = //504.html { internal; root /usr/share/nginx/html; try_files /504.html =504; }
	location = //403.html { internal; root /usr/share/nginx/html; try_files /403.html =403; }
	location = //404.html { internal; root /usr/share/nginx/html; try_files /404.html =404; }
}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}

upstream {{ $host }} {
	{{ range $container := $containers }}
		{{ $addrLen := len $container.Addresses }}
		{{/* If only 1 port exposed, use that */}}
		{{ if eq $addrLen 1 }}
			{{ with $address := index $container.Addresses 0 }}
				# {{$container.Name}}
				server {{ $address.IP }}:{{ $address.Port }};
			{{ end }}
		{{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var */}}
		{{ else if $container.Env.VIRTUAL_PORT }}
			{{ range $address := .Addresses }}
				{{ if eq $address.Port $container.Env.VIRTUAL_PORT }}
					# {{$container.Name}}
					server {{ $address.IP }}:{{ $address.Port }};
				{{ end }}
			{{ end }}
		{{/* Else default to standard web port 80 */}}
		{{ else }}
			{{ range $address := $container.Addresses }}
				{{ if eq $address.Port "80" }}
					# {{$container.Name}}
					server {{ $address.IP }}:{{ $address.Port }};
				{{ end }}
			{{ end }}
		{{ end }}
	{{ end }}
	keepalive 20;
}

{{/* Get the VIRTUAL_PROTO defined by containers w/ the same vhost, falling back to "http" */}}
{{ $proto := or (first (groupByKeys $containers "Env.VIRTUAL_PROTO")) "http" }}

{{/* Get the first cert name defined by containers w/ the same vhost */}}
{{ $certName := (first (groupByKeys $containers "Env.CERT_NAME")) }}

{{/* Get the best matching cert by name for the vhost. */}}
{{ $vhostCert := (closest (dir "/etc/ssl/private") (printf "%s.pem" $host))}}

{{/* vhostCert is actually a filename so remove any suffixes since they are added later */}}
{{ $vhostCert := replace $vhostCert ".pem" "" -1 }}

{{/* Use the cert specifid on the container or fallback to the best vhost match */}}
{{ $cert := (coalesce $certName $vhostCert) }}


{{ if (and (ne $cert "") (exists (printf "/etc/ssl/private/%s.pem" $cert))) }}

server {
	server_name {{ $host }};
	listen 80;
	return 301 https://$host$request_uri;
}

server {
	server_name {{ $host }};
	listen 443 ssl;

	ssl_trusted_certificate /etc/ssl/private/{{ (printf "%s.pem" $cert) }};
	ssl_certificate /etc/ssl/private/{{ (printf "%s.pem" $cert) }};
	ssl_certificate_key /etc/ssl/private/{{ (printf "%s.pem" $cert) }};

	add_header Strict-Transport-Security "max-age=15552000; includeSubdomains; preload"; # 180d

{{ else }}

server {
	server_name {{ $host }};
	listen 443 ssl;
	return 301 http://$host$request_uri;
}

server {
	server_name {{ $host }};
	listen 80;

{{ end }}

	location / {
		proxy_pass {{ $proto }}://{{ $host }};
	}

	error_page 500 //500.html;
	error_page 502 //502.html;
	error_page 503 //503.html;
	error_page 504 //504.html;
	error_page 403 //403.html;
	error_page 404 //404.html;
	location = //500.html { internal; root /usr/share/nginx/html; try_files /500.html =500; }
	location = //502.html { internal; root /usr/share/nginx/html; try_files /502.html =502; }
	location = //503.html { internal; root /usr/share/nginx/html; try_files /503.html =503; }
	location = //504.html { internal; root /usr/share/nginx/html; try_files /504.html =504; }
	location = //403.html { internal; root /usr/share/nginx/html; try_files /403.html =403; }
	location = //404.html { internal; root /usr/share/nginx/html; try_files /404.html =404; }
}

{{ end }}

}

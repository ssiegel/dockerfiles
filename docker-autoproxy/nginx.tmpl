server_names_hash_bucket_size 64;

server {
	listen 80;
	server_name _; # This is just an invalid value which will never trigger on a real hostname.
	error_log /proc/self/fd/2;
	access_log /proc/self/fd/1;

	location / {
		return 503;
	}

	error_page 500 //500.html;
	error_page 502 //502.html;
	error_page 503 //503.html;
	error_page 504 //504.html;
	error_page 403 //403.html;
	error_page 404 //404.html;
	location = //500.html { internal; root /usr/share/nginx/html; try_files /500.html =500; }
	location = //502.html { internal; root /usr/share/nginx/html; try_files /502.html =502; }
	location = //503.html { internal; root /usr/share/nginx/html; try_files /503.html =503; }
	location = //504.html { internal; root /usr/share/nginx/html; try_files /504.html =504; }
	location = //403.html { internal; root /usr/share/nginx/html; try_files /403.html =403; }
	location = //404.html { internal; root /usr/share/nginx/html; try_files /404.html =404; }
}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}

upstream {{ $host }} {
	{{ range $index, $value := $containers }}
		{{ $addrLen := len $value.Addresses }}
		{{/* If only 1 port exposed, use that */}}
		{{ if eq $addrLen 1 }}
			{{ with $address := index $value.Addresses 0 }}
			   # {{$value.Name}}
			   server {{ $address.IP }}:{{ $address.Port }};
			{{ end }}

		{{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var */}}
		{{ else if $value.Env.VIRTUAL_PORT }}
			{{ range $i, $address := $value.Addresses }}
			   {{ if eq $address.Port $value.Env.VIRTUAL_PORT }}
			   # {{$value.Name}}
			   server {{ $address.IP }}:{{ $address.Port }};
			   {{ end }}
			{{ end }}

		{{/* Else default to standard web port 80 */}}
		{{ else }}
			{{ range $i, $address := $value.Addresses }}
				{{ if eq $address.Port "80" }}
				# {{$value.Name}}
				server {{ $address.IP }}:{{ $address.Port }};
				{{ end }}
			{{ end }}
		{{ end }}
	{{ end }}
	keepalive 20;
}

map $http_upgrade $connection_upgrade {
	default upgrade;
	"" "";
}

server {
	gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

	server_name {{ $host }};
	proxy_buffering off;
	proxy_connect_timeout 30s;
	proxy_read_timeout 1d;
	proxy_send_timeout 1d;
	error_log /proc/self/fd/2;
	access_log /proc/self/fd/1;

	location / {
		proxy_pass http://{{ $host }};
		include /etc/nginx/proxy_params;

		# HTTP 1.1 support
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection $connection_upgrade;

		error_page 500 //500.html;
		error_page 502 //502.html;
		error_page 503 //503.html;
		error_page 504 //504.html;
		error_page 403 //403.html;
		error_page 404 //404.html;
	}
	location = //500.html { internal; root /usr/share/nginx/html; try_files /500.html =500; }
	location = //502.html { internal; root /usr/share/nginx/html; try_files /502.html =502; }
	location = //503.html { internal; root /usr/share/nginx/html; try_files /503.html =503; }
	location = //504.html { internal; root /usr/share/nginx/html; try_files /504.html =504; }
	location = //403.html { internal; root /usr/share/nginx/html; try_files /403.html =403; }
	location = //404.html { internal; root /usr/share/nginx/html; try_files /404.html =404; }
}
{{ end }}

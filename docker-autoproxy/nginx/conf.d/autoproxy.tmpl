{{/*
  Licensed under the terms of the MIT license.
  Based on https://github.com/jwilder/nginx-proxy/blob/44a5322/nginx.tmpl
  Copyright (c) 2014 Jason Wilder
  Modifications Copyright (c) 2015 Stefan Siegel
*/}}

ssl_dhparam /etc/ssl/private/dhparam-2048.pem;
ssl_trusted_certificate /etc/ssl/private/default.pem;
ssl_certificate /etc/ssl/private/default.pem;
ssl_certificate_key /etc/ssl/private/default.pem;


# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  ''      '';
}

# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_connect_timeout 30s;
proxy_read_timeout 1d;
proxy_send_timeout 1d;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $remote_addr;
proxy_set_header X-Forwarded-Proto $scheme;

server {
	listen 80 default_server;
	listen 443 default_server ssl;

	location / {
		return 503;
	}

	include error_pages;
}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}

upstream {{ $host }} {
	{{ range $container := $containers }}
		{{ $addrLen := len $container.Addresses }}
		{{/* If only 1 port exposed, use that */}}
		{{ if eq $addrLen 1 }}
			{{ with $address := index $container.Addresses 0 }}
				# {{$container.Name}}
				server {{ $address.IP }}:{{ $address.Port }};
			{{ end }}
		{{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var */}}
		{{ else if $container.Env.VIRTUAL_PORT }}
			{{ range $address := .Addresses }}
				{{ if eq $address.Port $container.Env.VIRTUAL_PORT }}
					# {{$container.Name}}
					server {{ $address.IP }}:{{ $address.Port }};
				{{ end }}
			{{ end }}
		{{/* Else default to standard web port 80 */}}
		{{ else }}
			{{ range $address := $container.Addresses }}
				{{ if eq $address.Port "80" }}
					# {{$container.Name}}
					server {{ $address.IP }}:{{ $address.Port }};
				{{ end }}
			{{ end }}
		{{ end }}
	{{ end }}
	keepalive 20;
}

{{/* Get the VIRTUAL_PROTO defined by containers w/ the same vhost, falling back to "http" */}}
{{ $proto := or (first (groupByKeys $containers "Env.VIRTUAL_PROTO")) "http" }}

{{/* Get the first cert name defined by containers w/ the same vhost */}}
{{ $certName := (first (groupByKeys $containers "Env.CERT_NAME")) }}

{{/* Get the best matching cert by name for the vhost. */}}
{{ $vhostCert := (closest (dir "/etc/ssl/private") (printf "%s.pem" $host))}}

{{/* vhostCert is actually a filename so remove any suffixes since they are added later */}}
{{ $vhostCert := replace $vhostCert ".pem" "" -1 }}

{{/* Use the cert specifid on the container or fallback to the best vhost match */}}
{{ $cert := (coalesce $certName $vhostCert) }}


{{ if (and (ne $cert "") (exists (printf "/etc/ssl/private/%s.pem" $cert))) }}

server {
	server_name {{ $host }};
	listen 80;
	return 301 https://$host$request_uri;
}

server {
	server_name {{ $host }};
	listen 443 ssl;

	ssl_trusted_certificate /etc/ssl/private/{{ (printf "%s.pem" $cert) }};
	ssl_certificate /etc/ssl/private/{{ (printf "%s.pem" $cert) }};
	ssl_certificate_key /etc/ssl/private/{{ (printf "%s.pem" $cert) }};

	add_header Strict-Transport-Security "max-age=15552000; includeSubdomains; preload"; # 180d

{{ else }}

server {
	server_name {{ $host }};
	listen 443 ssl;
	return 301 http://$host$request_uri;
}

server {
	server_name {{ $host }};
	listen 80;

{{ end }}

	location / {
		proxy_pass {{ $proto }}://{{ $host }};
	}

	include error_pages;
}

{{ end }}
